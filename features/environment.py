"""
Behave environment configuration –¥–ª—è Codev —Ç–µ—Å—Ç–æ–≤
"""
import os
import sys
from pathlib import Path


def before_all(context):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
    # –î–æ–±–∞–≤–∏—Ç—å project root –≤ PYTHONPATH
    project_root = Path(__file__).parent.parent
    sys.path.insert(0, str(project_root))

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    context.original_env = dict(os.environ)

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    context.project_root = project_root
    context.test_mode = True

    print(f"\nüß™ Starting Codev BDD tests")
    print(f"üìÅ Project root: {project_root}")
    print(f"üêç Python: {sys.version}")


def after_all(context):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    os.environ.clear()
    os.environ.update(context.original_env)

    print(f"\n‚úÖ Codev BDD tests completed")


def before_scenario(context, scenario):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context.test_dir = None
    context.installation_failed = False
    context.error_message = None


def after_scenario(context, scenario):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    # –í—ã–∑–æ–≤ cleanup —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ steps –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    if hasattr(context, 'cleanup_functions'):
        for cleanup_fn in context.cleanup_functions:
            try:
                cleanup_fn(context)
            except Exception as e:
                print(f"‚ö†Ô∏è  Cleanup error: {e}")


def before_feature(context, feature):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º feature —Ñ–∞–π–ª–æ–º"""
    print(f"\nüìù Feature: {feature.name}")


def after_feature(context, feature):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ feature —Ñ–∞–π–ª–∞"""
    pass


def before_step(context, step):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    pass


def after_step(context, step):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞"""
    if step.status == 'failed':
        # –í—ã–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if hasattr(context, 'error_message') and context.error_message:
            print(f"   üí• Error: {context.error_message}")
